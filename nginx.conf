user toszafar admin;

#if you want to put pid file somewhere else
#pid /path/to/pid

# how many worker process we want to run, auto =  number of cores on this machine. to run 2 we can worker_process 2;
worker_processes auto;

events{
    # this mean how many connections a single worker process can open. 
    # this can be set to a max (number of files that a worker process can open on the machine)
    # to make nginx perform at max, set the worker_processes to auto and worker_connection to max number (run ulimit -n to find that out)
    worker_connections 4846;
}
http{

    include mime.types;
    
    gzip on;
    gzip_comp_level 3;

    gzip_types text/css;



    server{
        listen 80;
        server_name localhost;
        root /Users/toszafar/my-nginx-sites;

        # try_files intercepts every request and if it has got anything available listed in front of it it will server it.
        # the last element i.e. /404 is rewrite and not relative to root above like other argument in the line
        try_files $uri /logo_non_existent.jpeg /greet /404;

        location /404{
            return 404 "Custom message: What you are trying to find is not here!";
        }

        location = /greet{
            return 200 "hello";
        }

        #create a custom log file
        location /customLogFile{
            access_log /Users/toszafar/my-nginx-sites/special_log.log;
            return 200 "this request is logged in a special log file called special_log.log";
        }

        #create two or more custom log file
        location /twoCustomLogFile{
            access_log /Users/toszafar/my-nginx-sites/special_log.log;
            access_log /Users/toszafar/my-nginx-sites/special_log2.log;
            return 200 "this request is logged in a special log file called special_log.log";
        }

        #turn off logging
        location /loggingOff{
            access_log off;
            return 200 "this request is logged in a special log file called special_log.log";
        }

        #run server side backend and use nginx as proxy pass to get the dynamic content and return is back to user.
        location / {
            proxy_pass http://localhost:8080;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_set_header X-Forwarded-Port $server_port;
        }

        # setting up response headers, telling browser to cache the response until mentioned expiry.
        location ~* \.(css|js)$ {
          add_header Cache-Control public;
          add_header Pragma public;
          add_header Vary Accept-Encoding;
          expires 1M;
        }
    }
}
